cd validation

rails generate model User name:string
Running via Spring preloader in process 14196
      invoke  active_record
      create    db/migrate/20210531140240_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml



rails generate model Address permanent:string
Running via Spring preloader in process 14209
      invoke  active_record
      create    db/migrate/20210531140255_create_addresses.rb
      create    app/models/address.rb
      invoke    test_unit
      create      test/models/address_test.rb
      create      test/fixtures/addresses.yml



rails generate migration AddUserRefToAddresses user:references
Running via Spring preloader in process 14230
      invoke  active_record
      create    db/migrate/20210531140328_add_user_ref_to_addresses.rb



rails db:migrate
== 20210531140240 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0028s
== 20210531140240 CreateUsers: migrated (0.0028s) =============================

== 20210531140255 CreateAddresses: migrating ==================================
-- create_table(:addresses)
   -> 0.0026s
== 20210531140255 CreateAddresses: migrated (0.0027s) =========================

== 20210531140328 AddUserRefToAddresses: migrating ============================
-- add_reference(:addresses, :user, {:null=>false, :foreign_key=>true})
   -> 0.0370s
== 20210531140328 AddUserRefToAddresses: migrated (0.0371s) ===================



rails console
Running via Spring preloader in process 14428
Loading development environment (Rails 6.1.3.2)


irb(main):001:0> user = User.create(name:"Mallik")
   (0.8ms)  SELECT sqlite_version(*)
  TRANSACTION (0.1ms)  begin transaction
  User Create (1.2ms)  INSERT INTO "users" ("name", "created_at", "updated_at") VALUES (?, ?, ?)  [["name", "Mallik"], ["created_at", "2021-05-31 14:12:44.611647"], ["updated_at", "2021-05-31 14:12:44.611647"]]
  TRANSACTION (5.2ms)  commit transaction
=> #<User id: 1, name: "Mallik", created_at: "2021-05-31 14:12:44.611647000 +0000", updated_at: "2021-05-31 14:12:44.611647000 +0000">



irb(main):002:0> user.create_address(permanent:"")
  TRANSACTION (0.1ms)  begin transaction
  Address Exists? (0.2ms)  SELECT 1 AS one FROM "addresses" WHERE LOWER("addresses"."permanent") = LOWER(?) LIMIT ?  [["permanent", ""], ["LIMIT", 1]]
  TRANSACTION (0.1ms)  rollback transaction
  Address Load (0.3ms)  SELECT "addresses".* FROM "addresses" WHERE "addresses"."user_id" = ? LIMIT ?  [["user_id", 1], ["LIMIT", 1]]
=> #<Address id: nil, permanent: "", created_at: nil, updated_at: nil, user_id: 1>


irb(main):006:0> user.address
=> #<Address id: nil, permanent: "", created_at: nil, updated_at: nil, user_id: 1>


irb(main):008:0> user.create_address()
  TRANSACTION (0.1ms)  begin transaction
  Address Exists? (0.2ms)  SELECT 1 AS one FROM "addresses" WHERE "addresses"."permanent" IS NULL LIMIT ?  [["LIMIT", 1]]
  TRANSACTION (0.1ms)  rollback transaction
=> #<Address id: nil, permanent: nil, created_at: nil, updated_at: nil, user_id: 1>
irb(main):009:0> User.all
  User Load (0.3ms)  SELECT "users".* FROM "users" /* loading for inspect */ LIMIT ?  [["LIMIT", 11]]
=> #<ActiveRecord::Relation [#<User id: 1, name: "Mallik", created_at: "2021-05-31 14:12:44.611647000 +0000", updated_at: "2021-05-31 14:12:44.611647000 +0000">]>


irb(main):010:0> Address.all
  Address Load (0.3ms)  SELECT "addresses".* FROM "addresses" /* loading for inspect */ LIMIT ?  [["LIMIT", 11]]
=> #<ActiveRecord::Relation []>



irb(main):011:0> user.create_address(permanent:"Aska")
  TRANSACTION (0.1ms)  begin transaction
  Address Exists? (0.3ms)  SELECT 1 AS one FROM "addresses" WHERE LOWER("addresses"."permanent") = LOWER(?) LIMIT ?  [["permanent", "Aska"], ["LIMIT", 1]]
  Address Create (1.5ms)  INSERT INTO "addresses" ("permanent", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?)  [["permanent", "Aska"], ["created_at", "2021-05-31 14:14:34.346888"], ["updated_at", "2021-05-31 14:14:34.346888"], ["user_id", 1]]
  TRANSACTION (4.3ms)  commit transaction
=> #<Address id: 1, permanent: "Aska", created_at: "2021-05-31 14:14:34.346888000 +0000", updated_at: "2021-05-31 14:14:34.346888000 +0000", user_id: 1>




irb(main):012:0> user.create_address(permanent:"Berhampur")
  TRANSACTION (0.1ms)  begin transaction
  Address Exists? (0.3ms)  SELECT 1 AS one FROM "addresses" WHERE LOWER("addresses"."permanent") = LOWER(?) LIMIT ?  [["permanent", "Berhampur"], ["LIMIT", 1]]
  Address Create (0.4ms)  INSERT INTO "addresses" ("permanent", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?)  [["permanent", "Berhampur"], ["created_at", "2021-05-31 14:14:52.570711"], ["updated_at", "2021-05-31 14:14:52.570711"], ["user_id", 1]]
  TRANSACTION (4.3ms)  commit transaction



  TRANSACTION (0.1ms)  begin transaction
  Address Exists? (0.2ms)  SELECT 1 AS one FROM "addresses" WHERE LOWER("addresses"."permanent") = LOWER(?) AND "addresses"."id" != ? LIMIT ?  [["permanent", "Aska"], ["id", 1], ["LIMIT", 1]]
  TRANSACTION (0.1ms)  rollback transaction
Traceback (most recent call last):
        1: from (irb):12
ActiveRecord::RecordNotSaved (Failed to remove the existing associated address. The record failed to save after its foreign key was set to nil.)



irb(main):013:0> Address.all
  Address Load (0.2ms)  SELECT "addresses".* FROM "addresses" /* loading for inspect */ LIMIT ?  [["LIMIT", 11]]
=> #<ActiveRecord::Relation [#<Address id: 1, permanent: "Aska", created_at: "2021-05-31 14:14:34.346888000 +0000", updated_at: "2021-05-31 14:14:34.346888000 +0000", user_id: 1>, #<Address id: 2, permanent: "Berhampur", created_at: "2021-05-31 14:14:52.570711000 +0000", updated_at: "2021-05-31 14:14:52.570711000 +0000", user_id: 1>]>



irb(main):014:0> error = User.create(name:"")
=> #<User id: nil, name: "", created_at: nil, updated_at: nil>



irb(main):015:0> error.errors[:name]
=> ["can't be blank", "is too short (minimum is 4 characters)"]



irb(main):016:0> error.errors.where(:name)
=> [#<ActiveModel::Error attribute=name, type=blank, options={}>, #<ActiveModel::Error attribute=name, type=too_short, options={:count=>4}>]

irb(main):022:0> error.errors.size
=> 2


irb(main):023:0> error.errors.clear
=> []


irb(main):024:0> error.errors.size
=> 0
